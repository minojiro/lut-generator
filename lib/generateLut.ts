type RGB = [r: number, g: number, b: number];
type LUT = RGB[];

export const getLutStepCount = (lut: LUT): number => {
  return Math.round(Math.cbrt(lut.length));
};

export const generateLut = (lutIn: LUT, lutOut: LUT): LUT => {
  if (lutIn.length !== lutOut.length) {
    throw new Error(
      `LUT size must be equal (in: ${lutIn.length}, out: ${lutOut.length})`
    );
  }

  const stepCount = getLutStepCount(lutIn);
  const unit = 1 / (stepCount - 1);
  const stepCount2 = Math.pow(stepCount, 2);
  const result = lutIn.map((inRgb, i) => {
    const outRgb = lutOut[i];
    const rgbIndexes = [
      i % stepCount, // r
      ~~((i % stepCount2) / stepCount), // g
      ~~(i / stepCount2), // b
    ];
    return rgbIndexes.map((colorI, j) => {
      const base = colorI * unit;
      const deltaIn = base - inRgb[j];
      const deltaOut = base - outRgb[j];
      const f = base - deltaIn + deltaOut;
      return Math.max(Math.min(f, 1), 0);
    }) as RGB;
  });
  return result;
};

export const stringToLut = (s: string): LUT => {
  const data = s;
  const reg = /^[\d\.\e\-]+\s+[\d\.\e\-]+\s+[\d\.\e\-]+$/;
  const lut: LUT = [];
  data.split("\n").forEach((s) => {
    if (reg.test(s)) {
      lut.push(s.split(" ").map(Number) as RGB);
    }
  });
  return lut;
};

export const lutToString = (lut: LUT): string => {
  const size = getLutStepCount(lut);
  const body = [
    'TITLE "Generated by Generator"',
    `LUT_3D_SIZE ${size}`,
    "",
    ...lut.map((rgb) => rgb.join(" ")),
    "",
  ].join("\n");
  return body;
};
